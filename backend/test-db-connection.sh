#!/bin/bash

# Script para testar conex√£o com banco
set -e

echo "üîç === TESTE DE CONEX√ÉO COM BANCO ==="

# Mostrar todas as vari√°veis relacionadas ao banco
echo "üìã Vari√°veis de ambiente do banco:"
echo "DATABASE_URL: ${DATABASE_URL:-'N√ÉO CONFIGURADA'}"
echo "DATABASE_URL_PUBLIC: ${DATABASE_URL_PUBLIC:-'N√ÉO CONFIGURADA'}"

# Testar conex√£o com DATABASE_URL
if [ -n "$DATABASE_URL" ]; then
    echo "üîç Testando conex√£o com DATABASE_URL..."
    python -c "
import os
from sqlalchemy import create_engine, text
try:
    engine = create_engine(os.getenv('DATABASE_URL'))
    with engine.connect() as conn:
        result = conn.execute(text('SELECT version()'))
        version = result.fetchone()[0]
        print(f'‚úÖ Conex√£o com DATABASE_URL OK')
        print(f'üìä Vers√£o do PostgreSQL: {version}')
        
        # Testar se consegue criar uma tabela de teste
        conn.execute(text('CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY, name VARCHAR(50))'))
        conn.execute(text('DROP TABLE IF EXISTS test_table'))
        print('‚úÖ Permiss√µes de cria√ß√£o/drop OK')
        
except Exception as e:
    print(f'‚ùå Erro na conex√£o com DATABASE_URL: {e}')
    exit(1)
"
else
    echo "‚ùå DATABASE_URL n√£o est√° configurada!"
fi

# Testar conex√£o com DATABASE_URL_PUBLIC (se existir)
if [ -n "$DATABASE_URL_PUBLIC" ]; then
    echo "üîç Testando conex√£o com DATABASE_URL_PUBLIC..."
    python -c "
import os
from sqlalchemy import create_engine, text
try:
    engine = create_engine(os.getenv('DATABASE_URL_PUBLIC'))
    with engine.connect() as conn:
        result = conn.execute(text('SELECT version()'))
        version = result.fetchone()[0]
        print(f'‚úÖ Conex√£o com DATABASE_URL_PUBLIC OK')
        print(f'üìä Vers√£o do PostgreSQL: {version}')
except Exception as e:
    print(f'‚ùå Erro na conex√£o com DATABASE_URL_PUBLIC: {e}')
"
fi

echo "üéØ Recomenda√ß√£o: Use DATABASE_URL para aplica√ß√µes no Railway"
