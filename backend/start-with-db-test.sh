#!/bin/bash

# Script que testa conex√£o e inicia aplica√ß√£o
set -e

echo "üöÄ === APLICA√á√ÉO COM TESTE DE BANCO ==="

# Mostrar todas as vari√°veis relacionadas ao banco
echo "üìã Vari√°veis de ambiente do banco:"
echo "DATABASE_URL: ${DATABASE_URL:-'N√ÉO CONFIGURADA'}"
echo "DATABASE_URL_PUBLIC: ${DATABASE_URL_PUBLIC:-'N√ÉO CONFIGURADA'}"

# Testar conex√£o com DATABASE_URL
if [ -n "$DATABASE_URL" ]; then
    echo "üîç Testando conex√£o com DATABASE_URL..."
    python -c "
import os
from sqlalchemy import create_engine, text
try:
    engine = create_engine(os.getenv('DATABASE_URL'))
    with engine.connect() as conn:
        result = conn.execute(text('SELECT version()'))
        version = result.fetchone()[0]
        print(f'‚úÖ Conex√£o com DATABASE_URL OK')
        print(f'üìä Vers√£o do PostgreSQL: {version}')
        
        # Testar se consegue criar uma tabela de teste
        conn.execute(text('CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY, name VARCHAR(50))'))
        conn.execute(text('DROP TABLE IF EXISTS test_table'))
        print('‚úÖ Permiss√µes de cria√ß√£o/drop OK')
        
except Exception as e:
    print(f'‚ùå Erro na conex√£o com DATABASE_URL: {e}')
    exit(1)
"
else
    echo "‚ùå DATABASE_URL n√£o est√° configurada!"
    exit 1
fi

# Executar migra√ß√µes
echo "üìä Executando migra√ß√µes do banco de dados..."
if alembic upgrade head; then
    echo "‚úÖ Migra√ß√µes executadas com sucesso"
else
    echo "‚ùå ERRO: Falha ao executar migra√ß√µes"
    echo "üîç Tentando executar migra√ß√µes com mais detalhes..."
    alembic upgrade head --verbose
fi

# Iniciar a aplica√ß√£o FastAPI
echo "üåê Iniciando servidor FastAPI..."
exec fastapi run src/backend/app.py --host 0.0.0.0 --port ${PORT:-8000}
