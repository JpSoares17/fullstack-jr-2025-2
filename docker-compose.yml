version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fullstack_postgres
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fullstack_network
    restart: unless-stopped

  # FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fullstack_backend
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@postgres:5432/fullstack_db}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-fullstack_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - fullstack_network
    restart: unless-stopped
    volumes:
      - ./backend/src:/app/src
      - ./backend/pyproject.toml:/app/pyproject.toml
      - ./backend/poetry.lock:/app/poetry.lock

  # Next.js Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fullstack_frontend
    env_file:
      - ./frontend/.env
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8000}
      NEXT_PUBLIC_API_TIMEOUT: ${NEXT_PUBLIC_API_TIMEOUT:-10000}
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-Fullstack App}
      NEXT_PUBLIC_APP_VERSION: ${NEXT_PUBLIC_APP_VERSION:-1.0.0}
      NEXT_PUBLIC_DEBUG_MODE: ${NEXT_PUBLIC_DEBUG_MODE:-false}
      NEXT_PUBLIC_LOG_LEVEL: ${NEXT_PUBLIC_LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - fullstack_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  fullstack_network:
    driver: bridge
